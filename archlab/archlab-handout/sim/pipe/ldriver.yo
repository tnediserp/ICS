                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44807000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6c804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 
0x034:                      | Loop:
0x034: c0f2f8ffffffffffffff | 	iaddq	$-8, %rdx
0x03e: 755000000000000000   | 	jge	Mpos0
0x047: 705d01000000000000   | 	jmp Endpos
0x050:                      | Mpos0:
0x050: 50170000000000000000 | 	mrmovq (%rdi), %rcx
0x05a: 40160000000000000000 | 	rmmovq %rcx, (%rsi)		# ...and store it to dst
0x064: c0f00100000000000000 | 	iaddq	$1, %rax
0x06e: 50870800000000000000 | 	mrmovq 8(%rdi), %r8
0x078: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)		# ...and store it to dst
0x082: c0f00100000000000000 | 	iaddq	$1, %rax
0x08c: 50971000000000000000 | 	mrmovq 16(%rdi), %r9
0x096: 40961000000000000000 | 	rmmovq %r9, 16(%rsi)	# ...and store it to dst
0x0a0: c0f00100000000000000 | 	iaddq	$1, %rax
0x0aa: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x0b4: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0be: c0f00100000000000000 | 	iaddq	$1, %rax
0x0c8: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11
0x0d2: 40b62000000000000000 | 	rmmovq %r11, 32(%rsi)	# ...and store it to dst
0x0dc: c0f00100000000000000 | 	iaddq	$1, %rax
0x0e6: 50c72800000000000000 | 	mrmovq 40(%rdi), %r12
0x0f0: 40c62800000000000000 | 	rmmovq %r12, 40(%rsi)	# ...and store it to dst
0x0fa: c0f00100000000000000 | 	iaddq	$1, %rax
0x104: 50d73000000000000000 | 	mrmovq 48(%rdi), %r13
0x10e: 40d63000000000000000 | 	rmmovq %r13, 48(%rsi)	# ...and store it to dst
0x118: c0f00100000000000000 | 	iaddq	$1, %rax
0x122: 50e73800000000000000 | 	mrmovq 56(%rdi), %r14
0x12c: 40e63800000000000000 | 	rmmovq %r14, 56(%rsi)	# ...and store it to dst
0x136: c0f00100000000000000 | 	iaddq	$1, %rax
0x140:                      | Npos8:
0x140: c0f74000000000000000 | 	iaddq $64, %rdi
0x14a: c0f64000000000000000 | 	iaddq $64, %rsi
0x154: 703400000000000000   | 	jmp	Loop
                            | 
0x15d:                      | Endpos:
0x15d: 2005                 | 	rrmovq 	%rax, %rbp #######
0x15f: c0f20700000000000000 | 	iaddq $7, %rdx
0x169: 757b01000000000000   | 	jge	BinarySearch
0x172: 70b502000000000000   | 	jmp Done
0x17b:                      | BinarySearch:
0x17b: c0f2fdffffffffffffff | 	iaddq	$-3, %rdx
0x185: 76c501000000000000   | 	jg	Bpos5
0x18e: 72a001000000000000   | 	jl	Bpos1
0x197: 703b02000000000000   | 	jmp	Rpos3
0x1a0:                      | Bpos1:
0x1a0: c0f20200000000000000 | 	iaddq	$2, %rdx
0x1aa: 765902000000000000   | 	jg	Rpos2
0x1b3: 729502000000000000   | 	jl	Rpos0
0x1bc: 707702000000000000   | 	jmp	Rpos1
0x1c5:                      | Bpos5:
0x1c5: c0f2feffffffffffffff | 	iaddq	$-2, %rdx
0x1cf: 721d02000000000000   | 	jl	Rpos4
0x1d8: 73ff01000000000000   | 	je	Rpos5
0x1e1:                      | Rpos6:
0x1e1: 50d73000000000000000 | 	mrmovq 48(%rdi), %r13
0x1eb: 40d63000000000000000 | 	rmmovq %r13, 48(%rsi)	# ...and store it to dst
0x1f5: c0f00100000000000000 | 	iaddq	$1, %rax
0x1ff:                      | Rpos5:
0x1ff: 50c72800000000000000 | 	mrmovq 40(%rdi), %r12
0x209: 40c62800000000000000 | 	rmmovq %r12, 40(%rsi)	# ...and store it to dst
0x213: c0f00100000000000000 | 	iaddq	$1, %rax
0x21d:                      | Rpos4:
0x21d: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11
0x227: 40b62000000000000000 | 	rmmovq %r11, 32(%rsi)	# ...and store it to dst
0x231: c0f00100000000000000 | 	iaddq	$1, %rax
0x23b:                      | Rpos3:
0x23b: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x245: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x24f: c0f00100000000000000 | 	iaddq	$1, %rax
0x259:                      | Rpos2:
0x259: 50971000000000000000 | 	mrmovq 16(%rdi), %r9
0x263: 40961000000000000000 | 	rmmovq %r9, 16(%rsi)	# ...and store it to dst
0x26d: c0f00100000000000000 | 	iaddq	$1, %rax
0x277:                      | Rpos1:
0x277: 50870800000000000000 | 	mrmovq 8(%rdi), %r8
0x281: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)		# ...and store it to dst
0x28b: c0f00100000000000000 | 	iaddq	$1, %rax
0x295:                      | Rpos0:
0x295: 50170000000000000000 | 	mrmovq (%rdi), %rcx
0x29f: 40160000000000000000 | 	rmmovq %rcx, (%rsi)	# ...and store it to dst
0x2a9: c0f00100000000000000 | 	iaddq	$1, %rax
                            | 	
0x2b3: 2005                 | 	rrmovq	%rax, %rbp
                            | 	
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2b5:                      | Done:
0x2b5: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2b6:                      | End:
                            | #/* $end ncopy-ys */
0x2b6:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2b8:                      | 	.align 8
0x2b8:                      | src:
0x2b8: ffffffffffffffff     | 	.quad -1
0x2c0: 0200000000000000     | 	.quad 2
0x2c8: fdffffffffffffff     | 	.quad -3
0x2d0: 0400000000000000     | 	.quad 4
0x2d8: fbffffffffffffff     | 	.quad -5
0x2e0: 0600000000000000     | 	.quad 6
0x2e8: f9ffffffffffffff     | 	.quad -7
0x2f0: 0800000000000000     | 	.quad 8
0x2f8: 0900000000000000     | 	.quad 9
0x300: 0a00000000000000     | 	.quad 10
0x308: f5ffffffffffffff     | 	.quad -11
0x310: 0c00000000000000     | 	.quad 12
0x318: 0d00000000000000     | 	.quad 13
0x320: 0e00000000000000     | 	.quad 14
0x328: f1ffffffffffffff     | 	.quad -15
0x330: 1000000000000000     | 	.quad 16
0x338: 1100000000000000     | 	.quad 17
0x340: 1200000000000000     | 	.quad 18
0x348: 1300000000000000     | 	.quad 19
0x350: 1400000000000000     | 	.quad 20
0x358: 1500000000000000     | 	.quad 21
0x360: 1600000000000000     | 	.quad 22
0x368: e9ffffffffffffff     | 	.quad -23
0x370: e8ffffffffffffff     | 	.quad -24
0x378: 1900000000000000     | 	.quad 25
0x380: e6ffffffffffffff     | 	.quad -26
0x388: e5ffffffffffffff     | 	.quad -27
0x390: 1c00000000000000     | 	.quad 28
0x398: 1d00000000000000     | 	.quad 29
0x3a0: 1e00000000000000     | 	.quad 30
0x3a8: 1f00000000000000     | 	.quad 31
0x3b0: e0ffffffffffffff     | 	.quad -32
0x3b8: 2100000000000000     | 	.quad 33
0x3c0: deffffffffffffff     | 	.quad -34
0x3c8: 2300000000000000     | 	.quad 35
0x3d0: 2400000000000000     | 	.quad 36
0x3d8: dbffffffffffffff     | 	.quad -37
0x3e0: daffffffffffffff     | 	.quad -38
0x3e8: 2700000000000000     | 	.quad 39
0x3f0: 2800000000000000     | 	.quad 40
0x3f8: d7ffffffffffffff     | 	.quad -41
0x400: d6ffffffffffffff     | 	.quad -42
0x408: d5ffffffffffffff     | 	.quad -43
0x410: 2c00000000000000     | 	.quad 44
0x418: d3ffffffffffffff     | 	.quad -45
0x420: 2e00000000000000     | 	.quad 46
0x428: d1ffffffffffffff     | 	.quad -47
0x430: d0ffffffffffffff     | 	.quad -48
0x438: cfffffffffffffff     | 	.quad -49
0x440: ceffffffffffffff     | 	.quad -50
0x448: cdffffffffffffff     | 	.quad -51
0x450: ccffffffffffffff     | 	.quad -52
0x458: 3500000000000000     | 	.quad 53
0x460: caffffffffffffff     | 	.quad -54
0x468: 3700000000000000     | 	.quad 55
0x470: 3800000000000000     | 	.quad 56
0x478: c7ffffffffffffff     | 	.quad -57
0x480: c6ffffffffffffff     | 	.quad -58
0x488: c5ffffffffffffff     | 	.quad -59
0x490: c4ffffffffffffff     | 	.quad -60
0x498: c3ffffffffffffff     | 	.quad -61
0x4a0: c2ffffffffffffff     | 	.quad -62
0x4a8: c1ffffffffffffff     | 	.quad -63
0x4b0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4c0:                      | 	.align 16
0x4c0:                      | Predest:
0x4c0: fadebc0000000000     | 	.quad 0xbcdefa
0x4c8:                      | dest:
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0:                      | Postdest:
0x6c0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x6c8:                      | .align 8
                            | # Run time stack
0x6c8: 0000000000000000     | 	.quad 0
0x6d0: 0000000000000000     | 	.quad 0
0x6d8: 0000000000000000     | 	.quad 0
0x6e0: 0000000000000000     | 	.quad 0
0x6e8: 0000000000000000     | 	.quad 0
0x6f0: 0000000000000000     | 	.quad 0
0x6f8: 0000000000000000     | 	.quad 0
0x700: 0000000000000000     | 	.quad 0
0x708: 0000000000000000     | 	.quad 0
0x710: 0000000000000000     | 	.quad 0
0x718: 0000000000000000     | 	.quad 0
0x720: 0000000000000000     | 	.quad 0
0x728: 0000000000000000     | 	.quad 0
0x730: 0000000000000000     | 	.quad 0
0x738: 0000000000000000     | 	.quad 0
0x740: 0000000000000000     | 	.quad 0
                            | 
0x748:                      | Stack:
