#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;

Loop:
	iaddq	$-8, %rdx
	jge	Mpos0
	jmp Endpos
Mpos0:
	mrmovq (%rdi), %rcx
	rmmovq %rcx, (%rsi)		# ...and store it to dst
	iaddq	$1, %rax
	mrmovq 8(%rdi), %r8
	rmmovq %r8, 8(%rsi)		# ...and store it to dst
	iaddq	$1, %rax
	mrmovq 16(%rdi), %r9
	rmmovq %r9, 16(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
	mrmovq 24(%rdi), %r10
	rmmovq %r10, 24(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
	mrmovq 32(%rdi), %r11
	rmmovq %r11, 32(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
	mrmovq 40(%rdi), %r12
	rmmovq %r12, 40(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
	mrmovq 48(%rdi), %r13
	rmmovq %r13, 48(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
	mrmovq 56(%rdi), %r14
	rmmovq %r14, 56(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
Npos8:
	iaddq $64, %rdi
	iaddq $64, %rsi
	jmp	Loop

Endpos:
	rrmovq 	%rax, %rbp #######
	iaddq $7, %rdx
	jge	BinarySearch
	jmp Done
BinarySearch:
	iaddq	$-3, %rdx
	jg	Bpos5
	jl	Bpos1
	jmp	Rpos3
Bpos1:
	iaddq	$2, %rdx
	jg	Rpos2
	jl	Rpos0
	jmp	Rpos1
Bpos5:
	iaddq	$-2, %rdx
	jl	Rpos4
	je	Rpos5
Rpos6:
	mrmovq 48(%rdi), %r13
	rmmovq %r13, 48(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
Rpos5:
	mrmovq 40(%rdi), %r12
	rmmovq %r12, 40(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
Rpos4:
	mrmovq 32(%rdi), %r11
	rmmovq %r11, 32(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
Rpos3:
	mrmovq 24(%rdi), %r10
	rmmovq %r10, 24(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
Rpos2:
	mrmovq 16(%rdi), %r9
	rmmovq %r9, 16(%rsi)	# ...and store it to dst
	iaddq	$1, %rax
Rpos1:
	mrmovq 8(%rdi), %r8
	rmmovq %r8, 8(%rsi)		# ...and store it to dst
	iaddq	$1, %rax
Rpos0:
	mrmovq (%rdi), %rcx
	rmmovq %rcx, (%rsi)	# ...and store it to dst
	iaddq	$1, %rax
	
	rrmovq	%rax, %rbp
	

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
