                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6e802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b802000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
                            | 
0x034:                      | Loop:
0x034: c0f2f8ffffffffffffff | 	iaddq	$-8, %rdx
0x03e: 755000000000000000   | 	jge	Mpos0
0x047: 705d01000000000000   | 	jmp Endpos
0x050:                      | Mpos0:
0x050: 50170000000000000000 | 	mrmovq (%rdi), %rcx
0x05a: 40160000000000000000 | 	rmmovq %rcx, (%rsi)		# ...and store it to dst
0x064: c0f00100000000000000 | 	iaddq	$1, %rax
0x06e: 50870800000000000000 | 	mrmovq 8(%rdi), %r8
0x078: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)		# ...and store it to dst
0x082: c0f00100000000000000 | 	iaddq	$1, %rax
0x08c: 50971000000000000000 | 	mrmovq 16(%rdi), %r9
0x096: 40961000000000000000 | 	rmmovq %r9, 16(%rsi)	# ...and store it to dst
0x0a0: c0f00100000000000000 | 	iaddq	$1, %rax
0x0aa: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x0b4: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x0be: c0f00100000000000000 | 	iaddq	$1, %rax
0x0c8: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11
0x0d2: 40b62000000000000000 | 	rmmovq %r11, 32(%rsi)	# ...and store it to dst
0x0dc: c0f00100000000000000 | 	iaddq	$1, %rax
0x0e6: 50c72800000000000000 | 	mrmovq 40(%rdi), %r12
0x0f0: 40c62800000000000000 | 	rmmovq %r12, 40(%rsi)	# ...and store it to dst
0x0fa: c0f00100000000000000 | 	iaddq	$1, %rax
0x104: 50d73000000000000000 | 	mrmovq 48(%rdi), %r13
0x10e: 40d63000000000000000 | 	rmmovq %r13, 48(%rsi)	# ...and store it to dst
0x118: c0f00100000000000000 | 	iaddq	$1, %rax
0x122: 50e73800000000000000 | 	mrmovq 56(%rdi), %r14
0x12c: 40e63800000000000000 | 	rmmovq %r14, 56(%rsi)	# ...and store it to dst
0x136: c0f00100000000000000 | 	iaddq	$1, %rax
0x140:                      | Npos8:
0x140: c0f74000000000000000 | 	iaddq $64, %rdi
0x14a: c0f64000000000000000 | 	iaddq $64, %rsi
0x154: 703400000000000000   | 	jmp	Loop
                            | 
0x15d:                      | Endpos:
0x15d: 2005                 | 	rrmovq 	%rax, %rbp #######
0x15f: c0f20700000000000000 | 	iaddq $7, %rdx
0x169: 757b01000000000000   | 	jge	BinarySearch
0x172: 70b502000000000000   | 	jmp Done
0x17b:                      | BinarySearch:
0x17b: c0f2fdffffffffffffff | 	iaddq	$-3, %rdx
0x185: 76c501000000000000   | 	jg	Bpos5
0x18e: 72a001000000000000   | 	jl	Bpos1
0x197: 703b02000000000000   | 	jmp	Rpos3
0x1a0:                      | Bpos1:
0x1a0: c0f20200000000000000 | 	iaddq	$2, %rdx
0x1aa: 765902000000000000   | 	jg	Rpos2
0x1b3: 729502000000000000   | 	jl	Rpos0
0x1bc: 707702000000000000   | 	jmp	Rpos1
0x1c5:                      | Bpos5:
0x1c5: c0f2feffffffffffffff | 	iaddq	$-2, %rdx
0x1cf: 721d02000000000000   | 	jl	Rpos4
0x1d8: 73ff01000000000000   | 	je	Rpos5
0x1e1:                      | Rpos6:
0x1e1: 50d73000000000000000 | 	mrmovq 48(%rdi), %r13
0x1eb: 40d63000000000000000 | 	rmmovq %r13, 48(%rsi)	# ...and store it to dst
0x1f5: c0f00100000000000000 | 	iaddq	$1, %rax
0x1ff:                      | Rpos5:
0x1ff: 50c72800000000000000 | 	mrmovq 40(%rdi), %r12
0x209: 40c62800000000000000 | 	rmmovq %r12, 40(%rsi)	# ...and store it to dst
0x213: c0f00100000000000000 | 	iaddq	$1, %rax
0x21d:                      | Rpos4:
0x21d: 50b72000000000000000 | 	mrmovq 32(%rdi), %r11
0x227: 40b62000000000000000 | 	rmmovq %r11, 32(%rsi)	# ...and store it to dst
0x231: c0f00100000000000000 | 	iaddq	$1, %rax
0x23b:                      | Rpos3:
0x23b: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10
0x245: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
0x24f: c0f00100000000000000 | 	iaddq	$1, %rax
0x259:                      | Rpos2:
0x259: 50971000000000000000 | 	mrmovq 16(%rdi), %r9
0x263: 40961000000000000000 | 	rmmovq %r9, 16(%rsi)	# ...and store it to dst
0x26d: c0f00100000000000000 | 	iaddq	$1, %rax
0x277:                      | Rpos1:
0x277: 50870800000000000000 | 	mrmovq 8(%rdi), %r8
0x281: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)		# ...and store it to dst
0x28b: c0f00100000000000000 | 	iaddq	$1, %rax
0x295:                      | Rpos0:
0x295: 50170000000000000000 | 	mrmovq (%rdi), %rcx
0x29f: 40160000000000000000 | 	rmmovq %rcx, (%rsi)	# ...and store it to dst
0x2a9: c0f00100000000000000 | 	iaddq	$1, %rax
                            | 	
0x2b3: 2005                 | 	rrmovq	%rax, %rbp
                            | 	
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x2b5:                      | Done:
0x2b5: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x2b6:                      | End:
                            | #/* $end ncopy-ys */
0x2b6:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x2b8:                      | 	.align 8
0x2b8:                      | src:
0x2b8: 0100000000000000     | 	.quad 1
0x2c0: feffffffffffffff     | 	.quad -2
0x2c8: 0300000000000000     | 	.quad 3
0x2d0: fcffffffffffffff     | 	.quad -4
0x2d8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x2e0:                      | 	.align 16
0x2e0:                      | Predest:
0x2e0: fadebc0000000000     | 	.quad 0xbcdefa
0x2e8:                      | dest:
0x2e8: abefcd0000000000     | 	.quad 0xcdefab
0x2f0: abefcd0000000000     | 	.quad 0xcdefab
0x2f8: abefcd0000000000     | 	.quad 0xcdefab
0x300: abefcd0000000000     | 	.quad 0xcdefab
0x308:                      | Postdest:
0x308: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x310:                      | .align 8
                            | # Run time stack
0x310: 0000000000000000     | 	.quad 0
0x318: 0000000000000000     | 	.quad 0
0x320: 0000000000000000     | 	.quad 0
0x328: 0000000000000000     | 	.quad 0
0x330: 0000000000000000     | 	.quad 0
0x338: 0000000000000000     | 	.quad 0
0x340: 0000000000000000     | 	.quad 0
0x348: 0000000000000000     | 	.quad 0
0x350: 0000000000000000     | 	.quad 0
0x358: 0000000000000000     | 	.quad 0
0x360: 0000000000000000     | 	.quad 0
0x368: 0000000000000000     | 	.quad 0
0x370: 0000000000000000     | 	.quad 0
0x378: 0000000000000000     | 	.quad 0
0x380: 0000000000000000     | 	.quad 0
0x388: 0000000000000000     | 	.quad 0
                            | 
0x390:                      | Stack:
